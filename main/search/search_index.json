{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#motivation","title":"Motivation","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>astrotech</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>astrotech</code> to a new version will possibly break any code that was using the old version of <code>astrotech</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>astrotech</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install astrotech\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>astrotech</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'astrotech[all]'\n</code></pre> <p>This command also installed NumPy and PyTorch. It is also possible to install the optional packages manually or to select the packages to install. In the following example, only NumPy is installed:</p> <pre><code>pip install astrotech numpy\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>astrotech</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/astrotech.git\n</code></pre> <p>It is recommended to create a Python 3.9+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate astrotech\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>astrotech</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/engine/","title":"engine","text":""},{"location":"refs/engine/#astrotech.engine","title":"astrotech.engine","text":"<p>Contain the engines.</p>"},{"location":"refs/engine/#astrotech.engine.state","title":"astrotech.engine.state","text":"<p>Contain the engine states.</p>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState","title":"astrotech.engine.state.BaseEngineState","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement an engine state.</p> <p>A state should implement the following attributes:</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state\nEngineState(\n  (epoch): -1\n  (iteration): -1\n  (max_epochs): 1\n  (modules): AssetManager(num_assets=0)\n  (random_seed): 9984043075503325450\n  (records): RecordManager()\n)\n&gt;&gt;&gt; state.epoch  # 0-based, the first epoch is 0. -1 means the training has not started\n&gt;&gt;&gt; state.iteration  # 0-based, the first iteration is 0. -1 means the training has not started\n&gt;&gt;&gt; state.max_epochs  # maximum number of epochs to run\n&gt;&gt;&gt; state.random_seed  # random seed\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.epoch","title":"astrotech.engine.state.BaseEngineState.epoch  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>epoch: int\n</code></pre> <p>Get the epoch value.</p> <p>The epoch is 0-based, i.e. the first epoch is 0. The value <code>-1</code> is used to indicate the training has not started.</p> <p>Returns:</p> Type Description <code>int</code> <p>The epoch value.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.epoch\n-1\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.iteration","title":"astrotech.engine.state.BaseEngineState.iteration  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>iteration: int\n</code></pre> <p>Get the iteration value.</p> <p>The iteration is 0-based, i.e. the first iteration is 0. The value <code>-1</code> is used to indicate the training has not started.</p> <p>Returns:</p> Type Description <code>int</code> <p>The iteration value.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.iteration\n-1\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.max_epochs","title":"astrotech.engine.state.BaseEngineState.max_epochs  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>max_epochs: int\n</code></pre> <p>Get the maximum number of training epochs.</p> <p>Returns:</p> Type Description <code>int</code> <p>The maximum number of training epochs.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.max_epochs\n1\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.random_seed","title":"astrotech.engine.state.BaseEngineState.random_seed  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>random_seed: int\n</code></pre> <p>Get the random seed.</p> <p>Returns:</p> Type Description <code>int</code> <p>The random seed.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState(random_seed=42)\n&gt;&gt;&gt; state.random_seed\n42\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.add_module","title":"astrotech.engine.state.BaseEngineState.add_module  <code>abstractmethod</code>","text":"<pre><code>add_module(name: str, module: Any) -&gt; None\n</code></pre> <p>Add a module to the engine state.</p> <p>Note that the name should be unique. If the name exists, the old module will be overwritten by the new module.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the module to add tovthe engine state.</p> required <code>module</code> <code>Any</code> <p>The module to add to the enfine state.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.add_module(\"model\", nn.Linear(4, 6))\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.add_record","title":"astrotech.engine.state.BaseEngineState.add_record  <code>abstractmethod</code>","text":"<pre><code>add_record(\n    record: BaseRecord, key: str | None = None\n) -&gt; None\n</code></pre> <p>Add a record to the state.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>BaseRecord</code> <p>The recordvto add to the state.</p> required <code>key</code> <code>str | None</code> <p>The key to use to store the record. If <code>None</code>, the name of the record is used.</p> <code>None</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minrecord import MinScalarRecord\n&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.add_record(MinScalarRecord(\"loss\"))\n&gt;&gt;&gt; state.add_record(MinScalarRecord(\"loss\"), \"my key\")\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.get_best_values","title":"astrotech.engine.state.BaseEngineState.get_best_values  <code>abstractmethod</code>","text":"<pre><code>get_best_values(\n    prefix: str = \"\", suffix: str = \"\"\n) -&gt; dict[str, Any]\n</code></pre> <p>Get the best value of each metric.</p> <p>This method ignores the metrics with empty record and the non-comparable record.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The prefix used to create the dict of best values. The goal of this prefix is to generate a name which is different from the record name to avoid confusion. By default, the returned dict uses the same name as the record.</p> <code>''</code> <code>suffix</code> <code>str</code> <p>The suffix used to create the dict of best values. The goal of this suffix is to generate a name which is different from the record name to avoid confusion. By default, the returned dict uses the same name as the record.</p> <code>''</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The dict with the best value of each metric.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from minrecord import MaxScalarRecord\n&gt;&gt;&gt; record = MaxScalarRecord(\"accuracy\")\n&gt;&gt;&gt; record.add_value(23.0)\n&gt;&gt;&gt; record.add_value(42.0)\n&gt;&gt;&gt; state.add_record(record)\n&gt;&gt;&gt; state.get_best_values()\n{'accuracy': 42.0}\n&gt;&gt;&gt; state.get_best_values(prefix=\"best/\")\n{'best/accuracy': 42.0}\n&gt;&gt;&gt; state.get_best_values(suffix=\"/best\")\n{'accuracy/best': 42.0}\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.get_module","title":"astrotech.engine.state.BaseEngineState.get_module  <code>abstractmethod</code>","text":"<pre><code>get_module(name: str) -&gt; Any\n</code></pre> <p>Get a module.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The module name to get.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The module</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the module does not exist.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; state.add_module(\"model\", nn.Linear(4, 6))\n&gt;&gt;&gt; state.get_module(\"model\")\nLinear(in_features=4, out_features=6, bias=True)\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.get_record","title":"astrotech.engine.state.BaseEngineState.get_record  <code>abstractmethod</code>","text":"<pre><code>get_record(key: str) -&gt; BaseRecord\n</code></pre> <p>Get the record associated to a key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the record to retrieve.</p> required <p>Returns:</p> Type Description <code>BaseRecord</code> <p>The record if it exists, otherwise it returns an empty record. The created empty record is of type <code>Record</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from minrecord import MinScalarRecord\n&gt;&gt;&gt; state.add_record(MinScalarRecord(\"loss\"))\n&gt;&gt;&gt; state.get_record(\"loss\")\nMinScalarRecord(name=loss, max_size=10, size=0)\n&gt;&gt;&gt; state.get_record(\"new_record\")\nRecord(name=new_record, max_size=10, size=0)\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.get_records","title":"astrotech.engine.state.BaseEngineState.get_records  <code>abstractmethod</code>","text":"<pre><code>get_records() -&gt; dict[str, BaseRecord]\n</code></pre> <p>Get all the records store in the state.</p> <p>Returns:</p> Type Description <code>dict[str, BaseRecord]</code> <p>The records with their keys.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from minrecord import MinScalarRecord\n&gt;&gt;&gt; state.add_record(MinScalarRecord(\"loss\"))\n&gt;&gt;&gt; state.get_records()\n{'loss': MinScalarRecord(name=loss, max_size=10, size=0)}\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.has_module","title":"astrotech.engine.state.BaseEngineState.has_module  <code>abstractmethod</code>","text":"<pre><code>has_module(name: str) -&gt; bool\n</code></pre> <p>Indicate if there is module for the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the module exists, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; state.add_module(\"model\", nn.Linear(4, 6))\n&gt;&gt;&gt; state.has_module(\"model\")\nTrue\n&gt;&gt;&gt; state.has_module(\"missing_module\")\nFalse\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.has_record","title":"astrotech.engine.state.BaseEngineState.has_record  <code>abstractmethod</code>","text":"<pre><code>has_record(key: str) -&gt; bool\n</code></pre> <p>Indicate if the state has a record for the given key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the record.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the record exists, <code>False</code> otherwise.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; from minrecord import MinScalarRecord\n&gt;&gt;&gt; state.add_record(MinScalarRecord(\"loss\"))\n&gt;&gt;&gt; state.has_record(\"loss\")\nTrue\n&gt;&gt;&gt; state.has_record(\"missing_record\")\nFalse\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.increment_epoch","title":"astrotech.engine.state.BaseEngineState.increment_epoch  <code>abstractmethod</code>","text":"<pre><code>increment_epoch(increment: int = 1) -&gt; None\n</code></pre> <p>Increment the epoch value by the given value.</p> <p>Parameters:</p> Name Type Description Default <code>increment</code> <code>int</code> <p>The increment for thevepoch value.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.epoch\n-1\n&gt;&gt;&gt; # Increment the epoch number by 1.\n&gt;&gt;&gt; state.increment_epoch()\n&gt;&gt;&gt; state.epoch\n0\n&gt;&gt;&gt; # Increment the epoch number by 10.\n&gt;&gt;&gt; state.increment_epoch(10)\n&gt;&gt;&gt; state.epoch\n10\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.increment_iteration","title":"astrotech.engine.state.BaseEngineState.increment_iteration  <code>abstractmethod</code>","text":"<pre><code>increment_iteration(increment: int = 1) -&gt; None\n</code></pre> <p>Increment the iteration value by the given value.</p> <p>Parameters:</p> Name Type Description Default <code>increment</code> <code>int</code> <p>The increment for the iteration value.</p> <code>1</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.iteration\n-1\n&gt;&gt;&gt; # Increment the iteration number by 1.\n&gt;&gt;&gt; state.increment_iteration()\n&gt;&gt;&gt; state.iteration\n0\n&gt;&gt;&gt; # Increment the iteration number by 10.\n&gt;&gt;&gt; state.increment_iteration(10)\n&gt;&gt;&gt; state.iteration\n10\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.load_state_dict","title":"astrotech.engine.state.BaseEngineState.load_state_dict  <code>abstractmethod</code>","text":"<pre><code>load_state_dict(state_dict: dict) -&gt; None\n</code></pre> <p>Load the state values from a dict.</p> <p>Parameters:</p> Name Type Description Default <code>state_dict</code> <code>dict</code> <p>A dict containing the state values to load.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.load_state_dict({\"epoch\": 4, \"iteration\": 42, \"records\": {}, \"modules\": {}})\n&gt;&gt;&gt; state.epoch\n4\n&gt;&gt;&gt; state.iteration\n42\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.remove_module","title":"astrotech.engine.state.BaseEngineState.remove_module  <code>abstractmethod</code>","text":"<pre><code>remove_module(name: str) -&gt; None\n</code></pre> <p>Remove a module from the state.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the module to remove.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the module name is not found.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.add_module(\"model\", nn.Linear(4, 6))\n&gt;&gt;&gt; state.has_module(\"model\")\nTrue\n&gt;&gt;&gt; state.remove_module(\"model\")\n&gt;&gt;&gt; state.has_module(\"model\")\nFalse\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.BaseEngineState.state_dict","title":"astrotech.engine.state.BaseEngineState.state_dict  <code>abstractmethod</code>","text":"<pre><code>state_dict() -&gt; dict\n</code></pre> <p>Return a dictionary containing state values.</p> <p>Returns:</p> Type Description <code>dict</code> <p>The state values in a dict.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state.state_dict()\n{'epoch': -1, 'iteration': -1, 'records': {}, 'modules': {}}\n</code></pre>"},{"location":"refs/engine/#astrotech.engine.state.EngineState","title":"astrotech.engine.state.EngineState","text":"<p>               Bases: <code>BaseEngineState</code></p> <p>Define the default engine state.</p> <p>Parameters:</p> Name Type Description Default <code>epoch</code> <code>int</code> <p>The number of epochsvperformed.</p> <code>-1</code> <code>iteration</code> <code>int</code> <p>The number of training iterations performed.</p> <code>-1</code> <code>max_epochs</code> <code>int</code> <p>The maximum number of epochs.</p> <code>1</code> <code>random_seed</code> <code>int</code> <p>The random seed.</p> <code>9984043075503325450</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.engine.state import EngineState\n&gt;&gt;&gt; state = EngineState()\n&gt;&gt;&gt; state\nEngineState(\n  (epoch): -1\n  (iteration): -1\n  (max_epochs): 1\n  (modules): AssetManager(num_assets=0)\n  (random_seed): 9984043075503325450\n  (records): RecordManager()\n)\n</code></pre>"},{"location":"refs/utils/","title":"utils","text":""},{"location":"refs/utils/#astrotech.utils","title":"astrotech.utils","text":"<p>Contain utility functions.</p>"},{"location":"refs/utils/#astrotech.utils.event","title":"astrotech.utils.event","text":"<p>Contain utility functions to manage events.</p>"},{"location":"refs/utils/#astrotech.utils.event.ConditionalEventHandler","title":"astrotech.utils.event.ConditionalEventHandler","text":"<p>               Bases: <code>ConditionalEventHandler</code></p> <p>Implements a variant of <code>minvent.ConditionalEventHandler</code> to not show the arguments in the to string method.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from minevent import PeriodicCondition\n&gt;&gt;&gt; from astrotech.utils.event import ConditionalEventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = ConditionalEventHandler(hello_handler, PeriodicCondition(freq=3))\n&gt;&gt;&gt; print(repr(handler))\nConditionalEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n  (condition): PeriodicCondition(freq=3, step=0)\n)\n&gt;&gt;&gt; print(str(handler))\nConditionalEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (condition): PeriodicCondition(freq=3, step=0)\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.event.EventHandler","title":"astrotech.utils.event.EventHandler","text":"<p>               Bases: <code>EventHandler</code></p> <p>Implements a variant of <code>minvent.EventHandler</code> to not show the arguments in the to string method.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.event import EventHandler\n&gt;&gt;&gt; def hello_handler() -&gt; None:\n...     print(\"Hello!\")\n...\n&gt;&gt;&gt; handler = EventHandler(hello_handler)\n&gt;&gt;&gt; print(repr(handler))\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n  (handler_args): ()\n  (handler_kwargs): {}\n)\n&gt;&gt;&gt; print(str(handler))\nEventHandler(\n  (handler): &lt;function hello_handler at 0x...&gt;\n)\n&gt;&gt;&gt; handler.handle()\nHello!\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.factory","title":"astrotech.utils.factory","text":"<p>Contain object factory utility functions.</p>"},{"location":"refs/utils/#astrotech.utils.factory.setup_object","title":"astrotech.utils.factory.setup_object","text":"<pre><code>setup_object(obj_or_config: T | dict) -&gt; T\n</code></pre> <p>Set up an object from its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>obj_or_config</code> <code>T | dict</code> <p>The object or its configuration.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The instantiated object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.factory import setup_object\n&gt;&gt;&gt; linear = setup_object(\n...     {\"_target_\": \"torch.nn.Linear\", \"in_features\": 4, \"out_features\": 6}\n... )\n&gt;&gt;&gt; linear\nLinear(in_features=4, out_features=6, bias=True)\n&gt;&gt;&gt; setup_object(linear)  # Do nothing because the module is already instantiated\nLinear(in_features=4, out_features=6, bias=True)\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.factory.str_target_object","title":"astrotech.utils.factory.str_target_object","text":"<pre><code>str_target_object(config: dict) -&gt; str\n</code></pre> <p>Get a string that indicates the target object in the config.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>A config using the <code>objectory</code> library. This dict is expected to have a key <code>'_target_'</code> to indicate the target object.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string with the target object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.factory import str_target_object\n&gt;&gt;&gt; str_target_object({OBJECT_TARGET: \"something.MyClass\"})\nsomething.MyClass\n&gt;&gt;&gt; str_target_object({})\nN/A\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.logging","title":"astrotech.utils.logging","text":"<p>Contain utility functions to manage loggers.</p>"},{"location":"refs/utils/#astrotech.utils.logging.disable_logging","title":"astrotech.utils.logging.disable_logging","text":"<pre><code>disable_logging(\n    level: int | str = logging.CRITICAL,\n) -&gt; Generator[None, None, None]\n</code></pre> <p>Context manager to temporarily disable the logging.</p> <p>All logging calls of severity <code>level</code> and below will be disabled.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int | str</code> <p>The logging level.</p> <code>CRITICAL</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; from astrotech.utils.logging import disable_logging\n&gt;&gt;&gt; with disable_logging(\"INFO\"):\n...     logging.critical(\"CRITICAL\")\n...     logging.info(\"INFO\")\n...     logging.debug(\"DEBUG\")\n...\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.mapping","title":"astrotech.utils.mapping","text":"<p>Contain utility functions to manipulate mappings/dicts.</p>"},{"location":"refs/utils/#astrotech.utils.mapping.convert_to_dict_of_lists","title":"astrotech.utils.mapping.convert_to_dict_of_lists","text":"<pre><code>convert_to_dict_of_lists(\n    seq_of_mappings: Sequence[Mapping],\n) -&gt; dict[Hashable, list]\n</code></pre> <p>Convert a sequence of mappings to a dictionary of lists.</p> <p>All the dictionaries should have the same keys. The first dictionary in the sequence is used to find the keys.</p> <p>Parameters:</p> Name Type Description Default <code>seq_of_mappings</code> <code>Sequence[Mapping]</code> <p>The sequence of mappings to convert.</p> required <p>Returns:</p> Type Description <code>dict[Hashable, list]</code> <p>A dictionary of lists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.mapping import convert_to_dict_of_lists\n&gt;&gt;&gt; convert_to_dict_of_lists(\n...     [{\"key1\": 1, \"key2\": 10}, {\"key1\": 2, \"key2\": 20}, {\"key1\": 3, \"key2\": 30}]\n... )\n{'key1': [1, 2, 3], 'key2': [10, 20, 30]}\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.mapping.convert_to_list_of_dicts","title":"astrotech.utils.mapping.convert_to_list_of_dicts","text":"<pre><code>convert_to_list_of_dicts(\n    mapping_of_seqs: Mapping[Hashable, Sequence]\n) -&gt; list[dict]\n</code></pre> <p>Convert a mapping of sequences to a list of dictionaries.</p> <p>All the sequences should have the same length.</p> <p>Parameters:</p> Name Type Description Default <code>mapping_of_seqs</code> <code>Mapping[Hashable, Sequence]</code> <p>The mapping of sequences to convert.</p> required <p>Returns:</p> Type Description <code>list[dict]</code> <p>A dictionary of lists.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.mapping import convert_to_list_of_dicts\n&gt;&gt;&gt; convert_to_list_of_dicts({\"key1\": [1, 2, 3], \"key2\": [10, 20, 30]})\n[{'key1': 1, 'key2': 10}, {'key1': 2, 'key2': 20}, {'key1': 3, 'key2': 30}]\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.mapping.get_first_value","title":"astrotech.utils.mapping.get_first_value","text":"<pre><code>get_first_value(data: Mapping) -&gt; Any\n</code></pre> <p>Get the first value of a mapping.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Mapping</code> <p>The input mapping.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The first value in the mapping.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.mapping import get_first_value\n&gt;&gt;&gt; get_first_value({\"key1\": 1, \"key2\": 2})\n1\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.mapping.remove_keys_starting_with","title":"astrotech.utils.mapping.remove_keys_starting_with","text":"<pre><code>remove_keys_starting_with(\n    mapping: Mapping, prefix: str\n) -&gt; dict\n</code></pre> <p>Remove the keys that start with a given prefix.</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>Mapping</code> <p>The original mapping.</p> required <code>prefix</code> <code>str</code> <p>The prefix used to find the keys to remove</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A new dict without the removed keys.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.mapping import remove_keys_starting_with\n&gt;&gt;&gt; remove_keys_starting_with(\n...     {\"key\": 1, \"key.abc\": 2, \"abc\": 3, \"abc.key\": 4, 1: 5, (2, 3): 6},\n...     \"key\",\n... )\n{'abc': 3, 'abc.key': 4, 1: 5, (2, 3): 6}\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.mapping.to_flat_dict","title":"astrotech.utils.mapping.to_flat_dict","text":"<pre><code>to_flat_dict(\n    data: Any,\n    prefix: str | None = None,\n    separator: str = \".\",\n    to_str: (\n        type[object] | tuple[type[object], ...] | None\n    ) = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Compute a flat representation of a nested dict with the dot format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The nested dict to flat.</p> required <code>prefix</code> <code>str | None</code> <p>The prefix to use to generate the name of the key. <code>None</code> means no prefix.</p> <code>None</code> <code>separator</code> <code>str</code> <p>The separator to concatenate keys of nested collections.</p> <code>'.'</code> <code>to_str</code> <code>type[object] | tuple[type[object], ...] | None</code> <p>The data types which will not be flattened out, instead they are converted to a string.</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>The flatted data.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.mapping import to_flat_dict\n&gt;&gt;&gt; data = {\n...     \"str\": \"def\",\n...     \"module\": {\n...         \"component\": {\n...             \"float\": 3.5,\n...             \"int\": 2,\n...         },\n...     },\n... }\n&gt;&gt;&gt; to_flat_dict(data)\n{'str': 'def', 'module.component.float': 3.5, 'module.component.int': 2}\n&gt;&gt;&gt; # Example with lists (also works with tuple)\n&gt;&gt;&gt; data = {\n...     \"module\": [[1, 2, 3], {\"bool\": True}],\n...     \"str\": \"abc\",\n... }\n&gt;&gt;&gt; to_flat_dict(data)\n{'module.0.0': 1, 'module.0.1': 2, 'module.0.2': 3, 'module.1.bool': True, 'str': 'abc'}\n&gt;&gt;&gt; # Example with lists with to_str=(list) (also works with tuple)\n&gt;&gt;&gt; data = {\n...     \"module\": [[1, 2, 3], {\"bool\": True}],\n...     \"str\": \"abc\",\n... }\n&gt;&gt;&gt; to_flat_dict(data)\n{'module.0.0': 1, 'module.0.1': 2, 'module.0.2': 3, 'module.1.bool': True, 'str': 'abc'}\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.param","title":"astrotech.utils.param","text":"<p>Contain utility functions for <code>torch.nn.Parameter</code> objects.</p>"},{"location":"refs/utils/#astrotech.utils.param.is_parameter","title":"astrotech.utils.param.is_parameter","text":"<pre><code>is_parameter(value: Any) -&gt; bool\n</code></pre> <p>Indicate if the input value is a <code>torch.nn.Parameter</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input value is a <code>torch.nn.Parameter</code>, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from torch.nn import Parameter, UninitializedParameter\n&gt;&gt;&gt; from astrotech.utils.param import is_parameter\n&gt;&gt;&gt; is_parameter(Parameter(torch.ones(2, 3)))\nTrue\n&gt;&gt;&gt; is_parameter(UninitializedParameter())\nTrue\n&gt;&gt;&gt; is_parameter(torch.ones(2, 3))\nFalse\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.param.is_uninitialized_parameter","title":"astrotech.utils.param.is_uninitialized_parameter","text":"<pre><code>is_uninitialized_parameter(value: Any) -&gt; bool\n</code></pre> <p>Indicate if the input value is a <code>torch.nn.UninitializedParameter</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>Specifies the value to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input value is a <code>torch.nn.UninitializedParameter</code>, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from torch.nn import Parameter, UninitializedParameter\n&gt;&gt;&gt; from astrotech.utils.param import is_uninitialized_parameter\n&gt;&gt;&gt; is_uninitialized_parameter(UninitializedParameter())\nTrue\n&gt;&gt;&gt; is_uninitialized_parameter(Parameter(torch.ones(2, 3)))\nFalse\n&gt;&gt;&gt; is_uninitialized_parameter(torch.ones(2, 3))\nFalse\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.time","title":"astrotech.utils.time","text":"<p>Contain utility functions to measure time.</p>"},{"location":"refs/utils/#astrotech.utils.time.sync_perf_counter","title":"astrotech.utils.time.sync_perf_counter","text":"<pre><code>sync_perf_counter() -&gt; float\n</code></pre> <p>Extension of <code>time.perf_counter</code> that waits for all kernels in all streams on a CUDA device to complete.</p> <p>Returns:</p> Type Description <code>float</code> <p>Same as <code>time.perf_counter()</code>. See https://docs.python.org/3/library/time.html#time.perf_counter for more information.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.time import sync_perf_counter\n&gt;&gt;&gt; tic = sync_perf_counter()\n&gt;&gt;&gt; x = [1, 2, 3]\n&gt;&gt;&gt; toc = sync_perf_counter()\n&gt;&gt;&gt; toc - tic\n</code></pre>"},{"location":"refs/utils/#astrotech.utils.time.timeblock","title":"astrotech.utils.time.timeblock","text":"<pre><code>timeblock(\n    message: str = \"Total time: {time}\",\n) -&gt; Generator[None, None, None]\n</code></pre> <p>Implement a context manager to measure the execution time of a block of code.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message displayed when the time is logged.</p> <code>'Total time: {time}'</code> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from astrotech.utils.time import timeblock\n&gt;&gt;&gt; with timeblock():\n...     x = [1, 2, 3]\n...\n&gt;&gt;&gt; with timeblock(\"Training: {time}\"):\n...     y = [1, 2, 3]\n...\n</code></pre>"}]}